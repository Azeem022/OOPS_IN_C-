=============================== OOPS ===============================================

#include<iostream>
using namespace std;
// DECLARETION OF CLASS. 
class student
{
	public:
		string name;
		int age, roll_no;
};
int main()
{
	//DECLARE OF OBJECT.
	student s1;
	s1.name = "Mohd Azeem";
	s1.age = 22;
	s1.roll_no = 12;
	cout<<"Your name is :"<<s1.name<<endl;
	cout<<"Your age is :"<<s1.age<<endl;
	cout<<"Your roll no is :"<<s1.roll_no<<endl;
	return 0;
}

========================================DECLARETION OF FUNCTION GETTER AND SETTER.==============================================
#include<iostream>
using namespace std;
class student
{
	public:
		string name;
		int age, roll_no;
	    // Function Getter and Setter 
	    public:
	    	void setname(string s)
	    	{
	    		name = s;
			}
			void setage(int a)
			{
				age = a;
			}
			void setroll_no(int a)
			{
				roll_no = a;
			}
			void getname()
			{
				cout<<name<<endl;
			}
			void getage()
			{
				cout<<age<<endl;
			}
			void getroll_no()
			{
				cout<<roll_no<<endl;
			}
};
int main()
{
	student s1;
	s1.setname("Mohd Azeem");
	s1.setage(22);
	s1.setroll_no(12);
// FUNCTION CALL
	s1.getname();
	s1.getage();
	s1.getroll_no();
	return 0;
}

//=====================DYNAMIC MEMORY ALLOCATION BY THE USE OF POINTER =====================
#include<iostream>
using namespace std;
class student
{
	public:
		string name ;
		int age, roll_number;
		string grade;
};

int main()
{
	student *s = new student;
	(*s).name = "Rohit";
	(*s).age = 22;
	(*s).roll_number = 12;
	(*s).grade = "A";
	
	cout<<s->name<<endl;
	cout<<s->age<<endl;
	cout<<s->roll_number<<endl;
	cout<<s->grade<<endl;
	return 0;
}

// =====================CONSTRUCTOR======================
1. It is a special function that is callled autometically at the time of object creation 
2. Name of the constructor should be same as class name.
3. It does not have any return type.
4. It is used to initialized the value.

//==================================CONSTRUCTOR WITH AND WITHOUT PARAMETERIZED ============================================
#include<iostream>
using namespace std;

class Customer
{
	string name; //--------------
	int account_number;      //  |_______________without this pointer hum isko use nhi kr skte.
	int balance;             //  |
	  //--------------------------                          
	public:
	//Default constructor
	Customer()
	{
	name = "Azeem";
	account_number = 123;
	balance = 100;	    // if function is same but different in there parameter then this is callled as constructor overloading
	}
	
	//Parameretrized Constructor
	Customer(string a, int b, int c)
	{
	name = a;
	account_number = b;
	balance = c;	
	}	
	
	Customer(string a, int b)
	{
		name = a;
		account_number = b;
	}
	
	void display()
	{
		cout<<name<<endl;
		cout<<account_number<<endl;
		cout<<balance<<endl;
	}
};

int main()
{
	Customer A1;
	Customer A2("Azeem",123,100);
	Customer A3("Azeem",25);
	
	A1.display();
	A2.display();
	A3.display();
	return 0;
}

//==================================CONSTRUCTOR WITH AND WITHOUT PARAMETERIZED AND WITH THE USE OF THIS POINTER ============================================
#include<iostream>
using namespace std;

class Customer
{
	string name; //--------------
	int account_number;      //  |_______________without this pointer hum isko use nhi kr skte.
	int balance;             //  |
	  //--------------------------                          
	public:
	//Default constructor
	Customer()
	{
	name = "Azeem";
	account_number = 123;
	balance = 100;	    // if function is same but different in there parameter then this is callled as constructor overloading
	}
	
	//Parameretrized Constructor
	Customer(string name, int account_number, int balance)
	{
	this->name = name;  //THIS POINTER ->JO OBJECT THIS POINTER KO CALL KRTA HAI YE USKE ADDRESS KO STORE KRKE RAKHTA HAI
	this->account_number = account_number;
	this->balance = balance;	
	}	
	
	Customer(string a, int b)
	{
		name = a;
		account_number = b;
	}

        // Inline constructor
        inline Customer(string a, int b, int c) : name(a), account_number(b), balance(c) {}

	void display()
	{
		cout<<name<<endl;
		cout<<account_number<<endl;
		cout<<balance<<endl;
	}
};

int main()
{
	Customer A1;
	Customer A2("Azeem",123,100);
	Customer A3("Azeem",25);
	
	A1.display();
	A2.display();
	A3.display();
	return 0;
}
